import streamlit as st
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from datetime import datetime
import io
import json
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Gerador de Laudos de Inspe√ß√£o Predial",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
    <style>
    .main { padding-top: 2rem; }
    .stButton>button {
        width: 100%;
        background-color: #1f77b4;
        color: white;
    }
    .stButton>button:hover {
        background-color: #145a8b;
    }
    </style>
""", unsafe_allow_html=True)

# Inicializar sess√£o
if 'laudos_salvos' not in st.session_state:
    st.session_state.laudos_salvos = {}
if 'eventos' not in st.session_state:
    st.session_state.eventos = []
if 'dados_laudo' not in st.session_state:
    st.session_state.dados_laudo = {}

# Dicion√°rios de op√ß√µes
OPCOES = {
    "contratada": [
        "Testcon Engenharia",
        "E2E Consultoria e Gest√£o",
        "Outra"
    ],
    "tipo_empreendimento": [
        "Institucional de ensino superior privado",
        "Comercial",
        "Residencial multifamiliar",
        "Industrial",
        "Hospitalar",
        "Outro"
    ],
    "anomalias": [
        "Efloresc√™ncia",
        "Pinturas em desconformidades",
        "Pilares apresentam expans√£o de armadura",
        "Marquises com rupturas e desplacamento",
        "Corros√£o",
        "Mofo e bolor",
        "Infiltra√ß√µes",
        "Fissuras",
        "Trincas",
        "Rachaduras",
        "Desplacamento de revestimento",
        "Vazamentos",
        "Problemas estruturais",
        "Defici√™ncia de impermeabiliza√ß√£o",
        "Instala√ß√µes el√©tricas inadequadas",
        "Selantes inadequados",
        "Pintura deteriorada",
        "Desorganiza√ß√£o",
        "Fixa√ß√£o inadequada",
        "Sem funcionamento",
        "Base de fixa√ß√£o inadequada",
        "Sistema inadequado",
        "Manchas de umidade",
        "Comprometimento de equipamentos",
        "Defici√™ncia de ventila√ß√£o",
        "Outra"
    ],
    "causas": [
        "End√≥gena",
        "Ex√≥gena", 
        "Funcional",
        "End√≥gena/Funcional",
        "Funcional/Ex√≥gena",
        "Outra"
    ],
    "consequencias": [
        "Preju√≠zo est√©tico",
        "Imin√™ncia de infiltra√ß√£o",
        "Risco √† seguran√ßa dos usu√°rios",
        "Comprometimento estrutural",
        "Insalubridade",
        "Perda de funcionalidade",
        "Comprometimento de equipamentos",
        "Falta de acessibilidade",
        "Preju√≠zo est√©tico e risco √† seguran√ßa dos usu√°rios",
        "Preju√≠zo est√©tico, imin√™ncia de infiltra√ß√£o e risco √† seguran√ßa dos usu√°rios",
        "Preju√≠zo est√©tico, insalubridade e risco √† seguran√ßa dos usu√°rios",
        "Outra"
    ],
    "recomendacoes": [
        "Contratar empresa especializada para reabilitar as estruturas",
        "Realizar pintura de toda √°rea",
        "Revisar estruturas e trocar selantes",
        "Impermeabilizar √°reas afetadas",
        "Adequar instala√ß√µes el√©tricas",
        "Realizar limpeza e organiza√ß√£o",
        "Substituir elementos danificados",
        "Realizar manuten√ß√£o preventiva",
        "Contratar empresa para verifica√ß√£o e adequa√ß√£o",
        "Reabilitar pinturas das paredes e tetos",
        "Fazer limpeza na √°rea",
        "Contratar empresa especializada para manuten√ß√£o",
        "Contratar empresa para adequar circula√ß√£o do ar",
        "Contratar empresa especializada para revis√£o de toda instala√ß√£o el√©trica",
        "Outra"
    ]
}

# Documenta√ß√µes padr√£o
DOCUMENTACOES = [
    "Certificado de Conclus√£o de Obra ou Habite-se",
    "Alvar√° ou Licen√ßa de Funcionamento",
    "Auto de Vistoria do Corpo de Bombeiros",
    "Licen√ßa de opera√ß√£o da ETE",
    "Licen√ßas ambientais",
    "Certificado de Acessibilidade",
    "Licen√ßa de perfura√ß√£o po√ßos profundos",
    "Documentos de forma√ß√£o da brigada de inc√™ndio",
    "Alvar√° de aprova√ß√£o para instala√ß√£o de equipamento",
    "Declara√ß√£o de presta√ß√£o de servi√ßos de Pronto Atendimento",
    "Aprova√ß√£o de paralelismo de Grupo Moto Gerador",
    "Manual de Uso, Opera√ß√£o e Manuten√ß√£o",
    "Registros de manuten√ß√µes",
    "Projetos Arquitet√¥nicos"
]

# Fun√ß√µes auxiliares para gerar o documento
def gerar_documento_completo(dados, eventos, incluir_rodape=True, incluir_numeracao=True, versao=1):
    """Gera o documento Word completo"""
    doc = Document()
    
    # Configurar estilos b√°sicos
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Arial'
    font.size = Pt(11)
    
    # CAPA
    # T√≠tulo principal
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = p.add_run("RELAT√ìRIO DE ENGENHARIA")
    run.font.size = Pt(16)
    run.font.bold = True
    
    # Subt√≠tulo
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = p.add_run("Laudo T√©cnico de Inspe√ß√£o Predial")
    run.font.size = Pt(14)
    run.font.bold = True
    
    # Espa√ßos
    for _ in range(3):
        doc.add_paragraph()
    
    # Informa√ß√µes do contratante
    p = doc.add_paragraph()
    p.add_run("Contratante: ").bold = True
    p.add_run(dados.get('contratante', ''))
    
    p = doc.add_paragraph()
    p.add_run("CNPJ: ").bold = True
    p.add_run(dados.get('cnpj', ''))
    
    p = doc.add_paragraph()
    p.add_run("Data: ").bold = True
    p.add_run(dados.get('data_laudo').strftime('%d/%m/%Y') if dados.get('data_laudo') else '')
    
    # Espa√ßos
    for _ in range(5):
        doc.add_paragraph()
    
    # Im√≥vel
    p = doc.add_paragraph()
    p.add_run("Im√≥vel motivo:").bold = True
    
    p = doc.add_paragraph()
    p.add_run(dados.get('endereco', ''))
    
    # Espa√ßos
    for _ in range(3):
        doc.add_paragraph()
    
    # Respons√°vel t√©cnico
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p.add_run("Silvio Augusto Barbosa de Albuquerque Filho, Engenheiro Civil")
    
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p.add_run("CREA/PE n¬∫ 054787D-PE")
    
    # Nova p√°gina para o sum√°rio
    doc.add_page_break()
    
    # SUM√ÅRIO
    doc.add_heading('Sum√°rio', level=1)
    
    # Lista de se√ß√µes
    secoes = [
        ("1. RESSALVAS INICIAIS", "4"),
        ("2. OBJETIVO", "5"),
        ("3. DESCRI√á√ÉO DO OBJETO INSPECIONADO", "8"),
        ("4. REFER√äNCIAS NORMATIVAS", "11"),
        ("5. TERMINOLOGIA", "12"),
        ("6. ABRANG√äNCIA DA AN√ÅLISE", "18"),
        ("7. CLASSIFICA√á√ÉO DAS IRREGULARIDADES", "19"),
        ("8. PATAMARES DE CRITICIDADE", "20"),
        ("9. AVALIA√á√ÉO DE MANUTEN√á√ÉO", "21"),
        ("10. AVALIA√á√ÉO DE USO", "23"),
        ("11. METODOLOGIA", "23"),
        ("12. DOCUMENTA√á√ïES SOLICITADAS E DISPONIBILIZADAS", "26"),
        ("13. ANAMNESE", "27"),
        ("14. LAUDO T√âCNICO", "48"),
        ("15. DATA DO RELAT√ìRIO T√âCNICO", "53")
    ]
    
    for titulo, pagina in secoes:
        p = doc.add_paragraph()
        p.add_run(titulo)
        p.add_run(f" {'.'*50} {pagina}")
    
    # Nova p√°gina para o conte√∫do
    doc.add_page_break()
    
    # 1. RESSALVAS INICIAIS
    doc.add_heading('RESSALVAS INICIAIS', level=1)
    doc.add_paragraph("O presente relat√≥rio t√©cnico obedeceu aos seguintes princ√≠pios e ressalvas:")
    
    ressalvas = [
        "O vistoriador signat√°rio inspecionou pessoalmente o objeto e o relat√≥rio t√©cnico foi elaborado pelo pr√≥prio e ningu√©m, a n√£o ser o mesmo, preparou as an√°lises e as respectivas conclus√µes;",
        "O Relat√≥rio t√©cnico foi elaborado com estrita observ√¢ncia dos postulados constantes do C√≥digo de √âtica Profissional;",
        "Os honor√°rios profissionais do signat√°rio n√£o est√£o, de qualquer forma, subordinados √†s conclus√µes deste relat√≥rio t√©cnico;",
        "O vistoriador signat√°rio n√£o tem nenhuma inclina√ß√£o pessoal em rela√ß√£o √† mat√©ria envolvida neste relat√≥rio t√©cnico no presente, nem contempla para o futuro, qualquer interesse no bem objeto deste relat√≥rio t√©cnico."
    ]
    
    for i, ressalva in enumerate(ressalvas, start=1):
        p = doc.add_paragraph()
        p.style = 'List Bullet'
        p.add_run(f"{chr(96+i)}) {ressalva}")
    
    # 2. OBJETIVO
    doc.add_page_break()
    doc.add_heading('OBJETIVO', level=1)
    
    p = doc.add_paragraph()
    p.add_run("O presente Laudo T√©cnico de Inspe√ß√£o Predial foi solicitado pelo ")
    p.add_run(dados.get('contratante', '')).bold = True
    p.add_run(", CNPJ: ")
    p.add_run(dados.get('cnpj', '')).bold = True
    p.add_run(", elaborado pelo Engenheiro Civil, Silvio Augusto Barbosa de Albuquerque Filho, CREA-PE n¬∫ 054787D-PE")
    
    if dados.get('art_numero'):
        p.add_run(f", com registro da ART n¬∫{dados['art_numero']} do presente documento.")
    else:
        p.add_run(".")
    
    doc.add_paragraph("A inspe√ß√£o ir√° registrar as anomalias e falhas prediais por meio de um check-up da edifica√ß√£o.")
    
    # Breve relato
    if dados.get('breve_relato'):
        doc.add_heading('BREVE RELATO', level=2)
        p = doc.add_paragraph()
        p.add_run(f"Entre os dias {dados.get('dias_vistoria', '')} foram realizadas vistorias pela empresa ")
        p.add_run(dados.get('contratada', '')).bold = True
        p.add_run(" a pedido do ")
        p.add_run(dados.get('contratante', '')).bold = True
        p.add_run(" no im√≥vel localizado ")
        p.add_run(dados.get('endereco', '')).bold = True
        p.add_run(", no qual afirma:")
        
        # Processar breve relato
        doc.add_paragraph()
        relato_linhas = dados['breve_relato'].split('\n')
        for i, linha in enumerate(relato_linhas, start=1):
            if linha.strip():
                p = doc.add_paragraph()
                p.style = 'List Number'
                p.add_run(linha.strip())
    
    # 3. DESCRI√á√ÉO DO OBJETO
    doc.add_page_break()
    doc.add_heading('DESCRI√á√ÉO DO OBJETO INSPECIONADO', level=1)
    
    p = doc.add_paragraph()
    p.add_run(f"Trata-se de um empreendimento do tipo {dados.get('tipo_empreendimento', '')}, ")
    p.add_run(dados.get('info_localizacao', ''))
    p.add_run(f". O edif√≠cio est√° {'ocupado' if dados.get('ocupado') == 'Sim' else 'desocupado'}.")
    
    # 12. DOCUMENTA√á√ïES
    doc.add_page_break()
    doc.add_heading('DOCUMENTA√á√ïES SOLICITADAS E DOCUMENTA√á√ïES DISPONIBILIZADAS:', level=1)
    
    docs_disponibilizadas = dados.get('docs_disponibilizadas', [])
    
    for doc_nome in DOCUMENTACOES:
        p = doc.add_paragraph()
        p.style = 'List Bullet'
        if doc_nome in docs_disponibilizadas:
            p.add_run(f"{doc_nome} - ")
            run = p.add_run("DISPONIBILIZADA")
            run.bold = True
        else:
            p.add_run(f"{doc_nome} - ")
            run = p.add_run("AUSENTE")
            run.bold = True
    
    if dados.get('obs_docs'):
        doc.add_paragraph()
        p = doc.add_paragraph()
        p.add_run("Obs: ").bold = True
        p.add_run(dados['obs_docs'])
    
    # 13. ANAMNESE
    doc.add_page_break()
    doc.add_heading('ANAMNESE', level=1)
    doc.add_paragraph(dados.get('anamnese', ''))
    
    doc.add_paragraph("A coordena√ß√£o de dados se d√° por meio de textos classificando as constata√ß√µes de modo que as an√°lises ser√£o divididas de acordo com os arquivos anexos.")
    
    # Processar eventos
    for evento in eventos:
        doc.add_paragraph()
        
        # T√≠tulo do evento
        p = doc.add_paragraph()
        run = p.add_run(f"EVENTO {evento['numero']:02d}: {evento['nome']}")
        run.bold = True
        run.font.size = Pt(12)
        
        # Informa√ß√µes do evento
        p = doc.add_paragraph()
        p.add_run("Localiza√ß√£o: ").bold = True
        p.add_run(evento.get('localizacao', ''))
        
        p = doc.add_paragraph()
        p.add_run("Anomalia: ").bold = True
        p.add_run(", ".join(evento.get('anomalias', [])))
        
        p = doc.add_paragraph()
        p.add_run("Prov√°vel causa: ").bold = True
        p.add_run(evento.get('causa', ''))
        
        p = doc.add_paragraph()
        p.add_run("Consequ√™ncia da anomalia: ").bold = True
        p.add_run(", ".join(evento.get('consequencias', [])))
        
        p = doc.add_paragraph()
        p.add_run("Patamar de urg√™ncia: ").bold = True
        p.add_run(evento.get('prioridade', ''))
        
        p = doc.add_paragraph()
        p.add_run("Uso: ").bold = True
        p.add_run(evento.get('uso', ''))
        
        p = doc.add_paragraph()
        p.add_run("Recomenda√ß√£o t√©cnica: ").bold = True
        p.add_run(", ".join(evento.get('recomendacoes', [])))
    
    # Tabela resumo
    if eventos:
        doc.add_page_break()
        doc.add_heading('Resumo de Eventos por Prioridade', level=2)
        
        # Criar tabela
        table = doc.add_table(rows=1, cols=3)
        table.style = 'Light Grid Accent 1'
        
        # Cabe√ßalho
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'EVENTO'
        hdr_cells[1].text = 'ANOMALIA'
        hdr_cells[2].text = 'PRIORIDADE'
        
        # Ordenar eventos por prioridade
        eventos_ordenados = sorted(eventos, key=lambda x: (x['prioridade'], x['numero']))
        
        # Adicionar linhas
        for evento in eventos_ordenados:
            row = table.add_row()
            row.cells[0].text = f"EVENTO {evento['numero']:02d}"
            row.cells[1].text = ", ".join(evento['anomalias'])
            row.cells[2].text = evento['prioridade'].split()[-1]
    
    # 14. LAUDO T√âCNICO
    doc.add_page_break()
    doc.add_heading('LAUDO T√âCNICO', level=1)
    
    if dados.get('texto_laudo'):
        doc.add_paragraph(dados['texto_laudo'])
    else:
        # Texto padr√£o
        texto_padrao = """O presente laudo t√©cnico de inspe√ß√£o predial foi elaborado com base nas vistorias realizadas entre os dias {} na edifica√ß√£o localizada em {}, pertencente ao {}. O objetivo foi avaliar as condi√ß√µes gerais da edifica√ß√£o, com foco na integridade estrutural, funcionalidade dos sistemas construtivos, seguran√ßa dos usu√°rios, e condi√ß√µes de habitabilidade, em conformidade com as diretrizes da ABNT NBR 16747:2020 e da NBR 13752:2024."""
        
        doc.add_paragraph(texto_padrao.format(
            dados.get('dias_vistoria', ''),
            dados.get('endereco', ''),
            dados.get('contratante', '')
        ))
    
    # 15. DATA DO RELAT√ìRIO
    doc.add_page_break()
    doc.add_heading('DATA DO RELAT√ìRIO T√âCNICO', level=1)
    
    p = doc.add_paragraph()
    p.add_run(f"Em {dados.get('data_laudo').strftime('%d de %B de %Y')}, ")
    p.add_run("com base nos trabalhos aqui representados encerramos o presente relat√≥rio t√©cnico.")
    
    # Assinatura
    for _ in range(3):
        doc.add_paragraph()
    
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p.add_run("_" * 50)
    
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p.add_run("Eng. Respons√°vel: Eng. Silvio Albuquerque Filho").bold = True
    
    p = doc.add_paragraph()
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p.add_run("CREA: 054787D-PE").bold = True
    
    if dados.get('art_numero'):
        p = doc.add_paragraph()
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        p.add_run(f"ART: {dados['art_numero']}").bold = True
    
    return doc

# Interface principal
st.title("üè¢ Gerador de Laudos de Inspe√ß√£o Predial")

# Sidebar
with st.sidebar:
    st.title("üìã Menu")
    st.info("Sistema profissional para gera√ß√£o de laudos t√©cnicos")
    
    if st.button("üÜï Novo Laudo"):
        st.session_state.dados_laudo = {}
        st.session_state.eventos = []
    
    if st.button("üíæ Salvar Rascunho"):
        if st.session_state.dados_laudo:
            nome = f"Rascunho_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            st.session_state.laudos_salvos[nome] = {
                'dados': st.session_state.dados_laudo.copy(),
                'eventos': st.session_state.eventos.copy()
            }
            st.success(f"Salvo: {nome}")
    
    if st.session_state.laudos_salvos:
        st.divider()
        st.subheader("üìÇ Laudos Salvos")
        for nome in st.session_state.laudos_salvos:
            if st.button(f"üìÑ {nome}", key=nome):
                st.session_state.dados_laudo = st.session_state.laudos_salvos[nome]['dados']
                st.session_state.eventos = st.session_state.laudos_salvos[nome]['eventos']
                st.success(f"Carregado: {nome}")

# Tabs principais
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìù Dados B√°sicos",
    "üìç Localiza√ß√£o",
    "üìã Documenta√ß√£o",
    "üîç Eventos",
    "üìÑ Gerar Laudo"
])

# TAB 1 - DADOS B√ÅSICOS
with tab1:
    st.subheader("Informa√ß√µes B√°sicas do Laudo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        contratante = st.text_input(
            "Nome do Contratante*",
            value=st.session_state.dados_laudo.get('contratante', ''),
            help="Ex: Ser Educacional S.A - Centro Universit√°rio"
        )
        
        cnpj = st.text_input(
            "CNPJ/CPF*",
            value=st.session_state.dados_laudo.get('cnpj', ''),
            help="Formato: XX.XXX.XXX/XXXX-XX"
        )
        
        data_laudo = st.date_input(
            "Data do Laudo*",
            value=st.session_state.dados_laudo.get('data_laudo', datetime.now())
        )
        
        contratada_opcao = st.selectbox(
            "Empresa Contratada*",
            options=OPCOES['contratada']
        )
        
        if contratada_opcao == "Outra":
            contratada = st.text_input("Nome da Contratada")
        else:
            contratada = contratada_opcao
    
    with col2:
        dias_vistoria = st.text_input(
            "Dias de Vistoria*",
            value=st.session_state.dados_laudo.get('dias_vistoria', ''),
            help="Ex: 08 a 11/07/2025"
        )
        
        art_numero = st.text_input(
            "N√∫mero da ART",
            value=st.session_state.dados_laudo.get('art_numero', ''),
            help="Deixe em branco se n√£o houver"
        )
        
        cidade_estado = st.text_input(
            "Cidade-Estado*",
            value=st.session_state.dados_laudo.get('cidade_estado', ''),
            help="Ex: Natal-RN"
        )
        
        ocupado = st.radio(
            "O empreendimento est√° ocupado?",
            ["Sim", "N√£o"],
            horizontal=True
        )
    
    # Salvar dados
    st.session_state.dados_laudo.update({
        'contratante': contratante,
        'cnpj': cnpj,
        'data_laudo': data_laudo,
        'contratada': contratada,
        'dias_vistoria': dias_vistoria,
        'art_numero': art_numero,
        'cidade_estado': cidade_estado,
        'ocupado': ocupado
    })

# TAB 2 - LOCALIZA√á√ÉO
with tab2:
    st.subheader("üìç Localiza√ß√£o do Im√≥vel")
    
    endereco = st.text_area(
        "Endere√ßo Completo*",
        value=st.session_state.dados_laudo.get('endereco', ''),
        height=100,
        help="Digite o endere√ßo completo incluindo CEP"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        tipo_opcao = st.selectbox(
            "Tipo de Empreendimento*",
            options=OPCOES['tipo_empreendimento']
        )
        if tipo_opcao == "Outro":
            tipo_empreendimento = st.text_input("Especifique o tipo")
        else:
            tipo_empreendimento = tipo_opcao
    
    with col2:
        info_localizacao = st.text_area(
            "Informa√ß√µes sobre a Localiza√ß√£o",
            value="encontra-se em √°rea urbanizada, perto de com√©rcio e com estrutura desenvolvida de saneamento b√°sico",
            height=100
        )
    
    st.session_state.dados_laudo.update({
        'endereco': endereco,
        'tipo_empreendimento': tipo_empreendimento,
        'info_localizacao': info_localizacao
    })

# TAB 3 - DOCUMENTA√á√ÉO
with tab3:
    st.subheader("üìã Documenta√ß√µes")
    st.info("Selecione as documenta√ß√µes que foram disponibilizadas")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úÖ Marcar Todas"):
            st.session_state['todas_docs'] = True
            st.rerun()
    with col2:
        if st.button("‚ùå Desmarcar Todas"):
            st.session_state['todas_docs'] = False
            st.rerun()
    
    st.divider()
    
    docs_disponibilizadas = []
    for i, doc in enumerate(DOCUMENTACOES):
        valor = st.session_state.get('todas_docs', False)
        if st.checkbox(doc, value=valor, key=f"doc_{i}"):
            docs_disponibilizadas.append(doc)
    
    obs_docs = st.text_area(
        "Observa√ß√µes sobre documenta√ß√µes",
        value=st.session_state.dados_laudo.get('obs_docs', ''),
        help="Ex: Obs: Das documenta√ß√µes solicitadas apenas os projetos arquitet√¥nicos..."
    )
    
    st.session_state.dados_laudo.update({
        'docs_disponibilizadas': docs_disponibilizadas,
        'obs_docs': obs_docs
    })

# TAB 4 - EVENTOS
with tab4:
    st.subheader("üîç Eventos de Inspe√ß√£o")
    
    # Breve relato
    st.subheader("Breve Relato")
    breve_relato = st.text_area(
        "Digite o breve relato da contratante (cada linha ser√° numerada)",
        value=st.session_state.dados_laudo.get('breve_relato', ''),
        height=200,
        help="Ex: Ocupam o im√≥vel h√° 2 anos\nN√£o possuem Manual de Uso..."
    )
    st.session_state.dados_laudo['breve_relato'] = breve_relato
    
    st.divider()
    
    # Anamnese
    anamnese = st.text_area(
        "Anamnese",
        value=st.session_state.dados_laudo.get('anamnese', 
            "Os usu√°rios da edifica√ß√£o pontuam de forma simplificada que perceberam uma deteriora√ß√£o comumente natural dos materiais componentes da edifica√ß√£o que est√£o em desconformidades, que por consequ√™ncia est√° ocorrendo na edifica√ß√£o, incid√™ncias de infiltra√ß√µes e problemas nas instala√ß√µes el√©tricas e hidrossanit√°rios, chegando √† solicita√ß√£o do presente laudo de inspe√ß√£o."),
        height=150
    )
    st.session_state.dados_laudo['anamnese'] = anamnese
    
    st.divider()
    
    # Gerenciamento de Eventos
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.subheader(f"Total de Eventos: {len(st.session_state.eventos)}")
    with col2:
        if st.button("‚ûï Adicionar Evento"):
            novo_evento = {
                'numero': len(st.session_state.eventos) + 1,
                'nome': '',
                'localizacao': 'Generalidades',
                'anomalias': [],
                'causa': 'Funcional',
                'consequencias': [],
                'prioridade': 'Prioridade 2',
                'uso': 'Regular',
                'recomendacoes': [],
                'imagens': []
            }
            st.session_state.eventos.append(novo_evento)
            st.rerun()
    with col3:
        if st.button("üóëÔ∏è Limpar Todos"):
            st.session_state.eventos = []
            st.rerun()
    
    # Exibir eventos
    for idx, evento in enumerate(st.session_state.eventos):
        with st.expander(f"üìå EVENTO {evento['numero']:02d}: {evento.get('nome', 'Sem nome')}", expanded=True):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                evento['nome'] = st.text_input(
                    "Nome do Evento",
                    value=evento.get('nome', ''),
                    key=f"nome_{idx}"
                )
            
            with col2:
                if st.button("‚ùå Remover", key=f"remove_{idx}"):
                    st.session_state.eventos.pop(idx)
                   # Renumerar eventos
                   for i, evt in enumerate(st.session_state.eventos):
                       evt['numero'] = i + 1
                   st.rerun()
           
           # Localiza√ß√£o
           loc_col1, loc_col2 = st.columns(2)
           with loc_col1:
               if st.checkbox("Generalidades", 
                             value=evento.get('localizacao') == 'Generalidades', 
                             key=f"gen_{idx}"):
                   evento['localizacao'] = "Generalidades"
           with loc_col2:
               loc_custom = st.text_input("Ou especifique:", key=f"loc_{idx}")
               if loc_custom:
                   evento['localizacao'] = loc_custom
           
           # Anomalias
           evento['anomalias'] = st.multiselect(
               "Anomalias",
               options=OPCOES['anomalias'],
               default=evento.get('anomalias', []),
               key=f"anom_{idx}"
           )
           
           # Causa
           evento['causa'] = st.selectbox(
               "Prov√°vel Causa",
               options=OPCOES['causas'],
               index=OPCOES['causas'].index(evento.get('causa', 'Funcional')),
               key=f"causa_{idx}"
           )
           
           # Consequ√™ncias
           evento['consequencias'] = st.multiselect(
               "Consequ√™ncias",
               options=OPCOES['consequencias'],
               default=evento.get('consequencias', []),
               key=f"cons_{idx}"
           )
           
           # Prioridade
           evento['prioridade'] = st.radio(
               "Patamar de Urg√™ncia",
               ["Prioridade 1", "Prioridade 2", "Prioridade 3"],
               index=["Prioridade 1", "Prioridade 2", "Prioridade 3"].index(
                   evento.get('prioridade', 'Prioridade 2')),
               key=f"prio_{idx}",
               horizontal=True
           )
           
           # Uso
           evento['uso'] = st.radio(
               "Uso",
               ["Regular", "Irregular"],
               index=["Regular", "Irregular"].index(evento.get('uso', 'Regular')),
               key=f"uso_{idx}",
               horizontal=True
           )
           
           # Recomenda√ß√µes
           evento['recomendacoes'] = st.multiselect(
               "Recomenda√ß√µes T√©cnicas",
               options=OPCOES['recomendacoes'],
               default=evento.get('recomendacoes', []),
               key=f"rec_{idx}"
           )
           
           # Upload de imagens
           st.write("üì∑ Imagens do Evento (2-3 imagens)")
           imgs = st.file_uploader(
               "Selecione as imagens",
               type=['png', 'jpg', 'jpeg'],
               accept_multiple_files=True,
               key=f"imgs_{idx}"
           )
           if imgs:
               if len(imgs) > 3:
                   st.warning("M√°ximo de 3 imagens. Usando apenas as 3 primeiras.")
                   evento['imagens'] = imgs[:3]
               else:
                   evento['imagens'] = imgs

# TAB 5 - GERAR LAUDO
with tab5:
   st.subheader("üìÑ Gera√ß√£o do Laudo Final")
   
   # Op√ß√µes do texto
   opcao_texto = st.radio(
       "Como deseja gerar o texto do laudo?",
       ["üìù Usar texto padr√£o", "‚úèÔ∏è Escrever manualmente"]
   )
   
   texto_laudo = ""
   if opcao_texto == "üìù Usar texto padr√£o":
       texto_laudo = """O presente laudo t√©cnico de inspe√ß√£o predial foi elaborado com base nas vistorias realizadas entre os dias [DIAS], na edifica√ß√£o localizada na [ENDERE√áO], pertencente ao [CONTRATANTE]. O objetivo foi avaliar as condi√ß√µes gerais da edifica√ß√£o, com foco na integridade estrutural, funcionalidade dos sistemas construtivos, seguran√ßa dos usu√°rios, e condi√ß√µes de habitabilidade, em conformidade com as diretrizes da ABNT NBR 16747:2020 e da NBR 13752:2024.

Com base na avalia√ß√£o t√©cnica criteriosa realizada nesta inspe√ß√£o predial, conclui-se que a edifica√ß√£o objeto deste laudo apresenta um quadro patol√≥gico de natureza multifatorial, cujas manifesta√ß√µes indicam um n√≠vel de criticidade classificado como alto, com predomin√¢ncia de anomalias do tipo end√≥geno e funcional.

A avalia√ß√£o sensorial in loco, realizada conforme os preceitos estabelecidos pela ABNT NBR 16747:2020 e demais normativas correlatas, evidenciou a presen√ßa de falhas recorrentes em sistemas de impermeabiliza√ß√£o, revestimentos, esquadrias, pisos e elementos de acessibilidade, comprometendo a durabilidade, a funcionalidade e, em determinadas circunst√¢ncias, a seguran√ßa e o conforto dos usu√°rios da edifica√ß√£o.

Importa salientar que devido a idade da constru√ß√£o de mais de uma d√©cada e a aus√™ncia de um plano sistematizado de manuten√ß√£o preventiva, bem como de documenta√ß√£o t√©cnica incompleta, incluindo manuais de uso e opera√ß√£o, tem potencializado o surgimento e agravamento das patologias observadas. A inexist√™ncia de determinadas licen√ßas legais e o uso indevido de determinados espa√ßos refor√ßam a necessidade de regulariza√ß√£o junto aos √≥rg√£os competentes.

Recomenda-se, com o devido grau de urg√™ncia e prioriza√ß√£o, a execu√ß√£o das interven√ß√µes corretivas indicadas neste relat√≥rio, por meio da contrata√ß√£o de empresas especializadas, com responsabilidade t√©cnica devidamente atribu√≠da, a fim de assegurar a conformidade t√©cnica, o atendimento aos requisitos normativos e a reabilita√ß√£o plena dos sistemas construtivos comprometidos."""
       
       # Preview
       st.text_area("Preview do texto padr√£o", texto_laudo, height=300, disabled=True)
       
   else:
       texto_laudo = st.text_area(
           "Digite o texto completo do laudo",
           value=st.session_state.dados_laudo.get('texto_laudo', ''),
           height=400,
           help="Digite aqui o texto completo do laudo t√©cnico"
       )
   
   st.session_state.dados_laudo['texto_laudo'] = texto_laudo
   
   # Op√ß√µes finais
   st.divider()
   
   col1, col2 = st.columns(2)
   with col1:
       incluir_rodape = st.checkbox("Incluir rodap√©", value=True)
       incluir_numeracao = st.checkbox("Incluir numera√ß√£o de p√°ginas", value=True)
   with col2:
       versao = st.number_input("Vers√£o do documento", min_value=1, value=1)
   
   # Valida√ß√£o
   campos_obrigatorios = ['contratante', 'cnpj', 'endereco', 'cidade_estado', 'dias_vistoria']
   todos_preenchidos = all(st.session_state.dados_laudo.get(campo) for campo in campos_obrigatorios)
   
   if not todos_preenchidos:
       st.warning("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios antes de gerar o laudo")
       campos_faltando = [campo for campo in campos_obrigatorios if not st.session_state.dados_laudo.get(campo)]
       st.error(f"Campos faltando: {', '.join(campos_faltando)}")
   elif len(st.session_state.eventos) == 0:
       st.warning("‚ö†Ô∏è Adicione pelo menos um evento antes de gerar o laudo")
   else:
       col1, col2, col3 = st.columns([1, 2, 1])
       with col2:
           if st.button("üöÄ GERAR LAUDO COMPLETO", type="primary", use_container_width=True):
               with st.spinner("Gerando documento... Por favor aguarde..."):
                   try:
                       # Gerar documento
                       doc = gerar_documento_completo(
                           st.session_state.dados_laudo,
                           st.session_state.eventos,
                           incluir_rodape,
                           incluir_numeracao,
                           versao
                       )
                       
                       # Salvar em buffer
                       doc_buffer = io.BytesIO()
                       doc.save(doc_buffer)
                       doc_buffer.seek(0)
                       
                       # Nome do arquivo
                       contratante_nome = st.session_state.dados_laudo['contratante'].replace(' ', '_')
                       data_str = st.session_state.dados_laudo['data_laudo'].strftime('%Y%m%d')
                       nome_arquivo = f"LAUDO_{contratante_nome}_{data_str}_v{versao}.docx"
                       
                       # Sucesso e download
                       st.success(f"‚úÖ Laudo gerado com sucesso!")
                       st.balloons()
                       
                       # Bot√£o de download
                       col1, col2, col3 = st.columns([1, 2, 1])
                       with col2:
                           st.download_button(
                               label="üì• BAIXAR LAUDO",
                               data=doc_buffer,
                               file_name=nome_arquivo,
                               mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                               use_container_width=True
                           )
                       
                       # Salvar na mem√≥ria
                       st.session_state.laudos_salvos[nome_arquivo] = {
                           'dados': st.session_state.dados_laudo.copy(),
                           'eventos': st.session_state.eventos.copy(),
                           'data_criacao': datetime.now()
                       }
                       
                       st.info(f"üìÅ Arquivo: {nome_arquivo}")
                       
                       # Informa√ß√µes do laudo
                       with st.expander("üìä Resumo do Laudo Gerado"):
                           col1, col2 = st.columns(2)
                           with col1:
                               st.write("**Contratante:**", st.session_state.dados_laudo['contratante'])
                               st.write("**CNPJ:**", st.session_state.dados_laudo['cnpj'])
                               st.write("**Endere√ßo:**", st.session_state.dados_laudo['endereco'])
                           with col2:
                               st.write("**Total de Eventos:**", len(st.session_state.eventos))
                               st.write("**Prioridade 1:**", sum(1 for e in st.session_state.eventos if e['prioridade'] == 'Prioridade 1'))
                               st.write("**Prioridade 2:**", sum(1 for e in st.session_state.eventos if e['prioridade'] == 'Prioridade 2'))
                               st.write("**Prioridade 3:**", sum(1 for e in st.session_state.eventos if e['prioridade'] == 'Prioridade 3'))
                       
                   except Exception as e:
                       st.error(f"‚ùå Erro ao gerar documento: {str(e)}")
                       st.error("Por favor, verifique se todos os campos est√£o preenchidos corretamente.")

# Footer
st.divider()
st.markdown("""
<div style='text-align: center; color: gray; padding: 20px;'>
   <p>Sistema de Gera√ß√£o de Laudos de Inspe√ß√£o Predial v1.0</p>
   <p>Desenvolvido para facilitar a cria√ß√£o de laudos t√©cnicos profissionais</p>
</div>
""", unsafe_allow_html=True)